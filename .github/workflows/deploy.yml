name: Deploy

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

  build-crypto:
    name: Build Crypto Predictor
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd projects/AI_Crypto_Price_Predictor
          python -m pip install --upgrade pip
          pip install build wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build package
        run: |
          cd projects/AI_Crypto_Price_Predictor
          python -m build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: crypto-predictor
          path: projects/AI_Crypto_Price_Predictor/dist/

  build-ocr:
    name: Build OCR System
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd projects/Document_Digitization_OCR_System
          python -m pip install --upgrade pip
          pip install build wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build package
        run: |
          cd projects/Document_Digitization_OCR_System
          python -m build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ocr-system
          path: projects/Document_Digitization_OCR_System/dist/

  build-analytics:
    name: Build Analytics Tool
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd projects/University_Marketing_Analytics_Tool
          python -m pip install --upgrade pip
          pip install build wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build package
        run: |
          cd projects/University_Marketing_Analytics_Tool
          python -m build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: marketing-analytics
          path: projects/University_Marketing_Analytics_Tool/dist/

  deploy:
    name: Create Release
    needs: [prepare-release, build-crypto, build-ocr, build-analytics]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "Generating release notes for version ${{ needs.prepare-release.outputs.version }}"
          # Add logic to generate release notes from git log or changelog

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.prepare-release.outputs.version }}
          body_path: ${{ steps.release_notes.outputs.path }}
          draft: false
          prerelease: false
          files: |
            artifacts/crypto-predictor/*
            artifacts/ocr-system/*
            artifacts/marketing-analytics/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    needs: [prepare-release, deploy]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to staging environment
        run: |
          echo "Deploying version ${{ needs.prepare-release.outputs.version }} to staging"
          # Add deployment steps for each service

  deploy-production:
    name: Deploy to Production
    needs: [prepare-release, deploy-staging]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-production-url.com
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to production environment
        run: |
          echo "Deploying version ${{ needs.prepare-release.outputs.version }} to production"
          # Add production deployment steps

      - name: Notify deployment
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'deployments'
          slack-message: "Successfully deployed version ${{ needs.prepare-release.outputs.version }} to production! ðŸš€"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
